 <div className="bg-white rounded-lg shadow-md border border-gray-200 p-4 sm:p-6 animate-slide-up">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Expenses History</h3>
            <div className="space-y-4 mb-6">

              {expenses.map((expense) => {
                const paidById = expense.paidBy?._id || expense.paidBy;
                const paidByMember = activeGroup.members.find(m => m._id.toString() === paidById.toString());
                const paidByDisplay = paidByMember
                  ? (paidByMember.email === userEmail ? 'You' : (paidByMember.name || paidByMember.email))
                  : (expense.paidBy?.name || 'Unknown');

                const participantDisplays = expense.participants.map((participantObj) => {
                  const participantId = participantObj?._id || participantObj;
                  const participantMember = activeGroup.members.find(m => m._id.toString() === participantId.toString());
                  return participantMember
                    ? (participantMember.email === userEmail ? 'You' : (participantMember.name || participantMember.email))
                    : participantId;
                }).join(', ');

                // Get loading state for this specific expense (no hook call here)
                const isUpdating = updatingExpenses[expense._id] || false;

                // Handler to toggle isSettled with loading state
                const handleToggleSettled = async () => {
                  // Set loading state for this specific expense
                  setUpdatingExpenses(prev => ({ ...prev, [expense._id]: true }));
                  try {
                    await axios.patch(`${API_BASE}/expenses/${expense._id}`, {
                      isSettled: !expense.isSettled
                    }, { headers: { Authorization: `Bearer ${token}` } });
                    showNotification(`Expense marked as ${!expense.isSettled ? 'settled' : 'unsettled'}!`);
                    // Refresh expenses to update the UI
                    const res = await axios.get(`${API_BASE}/expenses/${activeGroup._id}`, { headers: { Authorization: `Bearer ${token}` } });
                    setExpenses(res.data.expenses);
                    setBalances(res.data.balances);
                    calculateOptimizedTransactions(res.data.balances);
                  } catch (err) {
                    setError(`Failed to update expense: ${err.response?.data?.error || err.message}`);
                  } finally {
                    // Remove loading state for this specific expense
                    setUpdatingExpenses(prev => {
                      const newState = { ...prev };
                      delete newState[expense._id];
                      return newState;
                    });
                  }
                };

                return (
                  <div key={expense._id} className="p-4 bg-gray-50 rounded-md shadow border border-gray-200">
                    <p className="font-medium text-gray-900">{expense.title}</p>
                    <p className="text-sm text-gray-600">Amount: â‚¹{expense.amount}</p>
                    <p className="text-sm text-gray-600">Paid by: {paidByDisplay}</p>
                    <p className="text-sm text-gray-600">Participants: {participantDisplays}</p>
                    {/* Settled/Unsettled Toggle with Loader */}
                    <div className="mt-2 flex items-center">
                      <div className="relative">
                        <input
                          type="checkbox"
                          id={`settled-${expense._id}`}
                          checked={expense.isSettled || false}
                          onChange={handleToggleSettled}
                          disabled={isUpdating}
                          className={`h-5 w-5 text-emerald-600 border-gray-300 rounded focus:ring-emerald-500 transition-all duration-200 ${isUpdating ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'
                            }`}
                        />
                        {isUpdating && (
                          <div className="absolute inset-0 flex items-center justify-center">
                            <div className="w-3 h-3 border-2 border-emerald-600 border-t-transparent rounded-full animate-spin"></div>
                          </div>
                        )}
                      </div>
                      <label
                        htmlFor={`settled-${expense._id}`}
                        className={`ml-2 text-sm font-medium transition-colors ${isUpdating
                          ? 'text-gray-400 cursor-not-allowed'
                          : 'text-gray-700 hover:text-emerald-600'
                          }`}
                      >
                        {expense.isSettled ? 'Settled' : 'Unsettled'}
                        {isUpdating && <span className="ml-1 text-xs">(updating...)</span>}
                      </label>
                    </div>
                  </div>
                );
              })}
            </div>
            {activeGroup &&
              <button onClick={() => setIsAddExpenseModalOpen(true)} className="mt-6 w-full bg-emerald-600 text-white py-3 px-4 rounded-md font-medium hover:bg-emerald-700 transition-all duration-300 ease-in-out transform hover:scale-[1.02] shadow-sm hover:shadow-md">
                Add New Expense
              </button>
            }

          </div>